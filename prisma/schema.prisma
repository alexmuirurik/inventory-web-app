datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            			String          @id @default(auto()) @map("_id") @db.ObjectId
    name          			String?
    email         			String?         @unique
    emailVerified 			DateTime?
    image         			String?
    accounts      			Account[]
    sessions      			Session[]
	companies	  			Company []
	sentmessages  			SentMessage []
	receivedmessages		ReceivedMessage[]
	writingjobs	  			Writer []	
	editingjobs	  			Editor []	  
    Authenticator 			Authenticator[]
    createdAt 				DateTime @default(now())
    updatedAt 				DateTime @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @id @map("_id")
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, credentialID])
}

model Company {
	id 					String @id @default(auto()) @map("_id") @db.ObjectId
	slug				String @unique
	title				String
	description			String @db.String
	userId				String @db.ObjectId
	location			String
	payperword			Float
	owner				User @relation(fields: [userId], references: [id])
	folders				Folder []
	tasks				Task  []
	writers				Writer[]
	editors				Editor []
	invoices			Invoice []
	billings			Billing []
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Writer {
	id 					String @id @default(auto()) @map("_id") @db.ObjectId
	email				String @unique
	userId				String @db.ObjectId
	companyId			String @db.ObjectId
	user				User @relation(fields: [userId], references: [id])
	company				Company @relation(fields: [companyId], references: [id])
	tasks				Task []
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Editor {
	id 					String @id @default(auto()) @map("_id") @db.ObjectId
	email				String @unique
	userId				String @db.ObjectId
	companyId			String @db.ObjectId
	user				User @relation(fields: [userId], references: [id])
	company				Company @relation(fields: [companyId], references: [id])
	tasks				Task []
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Folder {
	id 					String @id @default(auto()) @map("_id") @db.ObjectId
	slug				String @unique
	title 				String 
	description 		String 
	companyId			String @db.ObjectId
	taskcount			Int?
	progress			Int?
	tasks				Task []
	company				Company @relation(fields: [companyId], references: [id])
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
	id 					String @id @default(auto()) @map("_id") @db.ObjectId
	slug				String @unique
	title				String
	wordcount			Int
	instructions		String @db.String
	content				String? @db.String
	status				String
	deadline			Int
	folderId			String @db.ObjectId
	companyId			String @db.ObjectId
	editorId			String? @db.ObjectId
	writerId			String? @db.ObjectId
	invoiceId			String? @db.ObjectId
	writer				Writer? @relation(fields: [writerId], references: [id])
	editor				Editor? @relation(fields: [editorId], references: [id])
	invoice				Invoice? @relation(fields: [invoiceId], references: [id])
	folder				Folder @relation(fields: [folderId], references: [id])
	company				Company @relation(fields: [companyId], references: [id])
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SentMessage {
	id					String @id @default(auto()) @map("_id") @db.ObjectId
	description			String @db.String
	receiverId			String @db.ObjectId
	receiver			User @relation(fields: [receiverId], references: [id])
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ReceivedMessage {
	id					String @id @default(auto()) @map("_id") @db.ObjectId
	description			String @db.String
	senderId			String @db.ObjectId
	sender				User @relation(fields: [senderId], references: [id])
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Invoice {
	id					String @id @default(auto()) @map("_id") @db.ObjectId
	title				String
	description			String @db.String
	amount				Float
	paymentmethod		String?
	status				String
	companyId			String @db.ObjectId
	company				Company @relation(fields: [companyId], references: [id])
	tasks				Task []
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Billing {
	id					String @id @default(auto()) @map("_id") @db.ObjectId
	title				String
	description			String @db.String
	companyId			String @db.ObjectId
	amount				Float
	paymentmethod		String
	status				String
	company				Company @relation(fields: [companyId], references: [id])
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}