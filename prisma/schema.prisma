datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            			String          @id @default(auto()) @map("_id") @db.ObjectId
    name          			String?
    email         			String?         @unique
    emailVerified 			DateTime?
    image         			String?
    role                    String @default("owner")
    activeLocation          String? @db.ObjectId
    payments                Payment[]
    accounts      			Account[]
    sessions      			Session[]  
    businesses              Business[]
    Authenticator 			Authenticator[]
    createdAt 				DateTime @default(now())
    updatedAt 				DateTime @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime
    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @id @map("_id")
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user 				User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([userId, credentialID])
}

model Business {
	id				String @id @default(auto()) @map("_id") @db.ObjectId
	name			String 
    mobile          String
    logo            String?
    subscription    String?
	ownerId			String @db.ObjectId
    owner           User @relation(fields: [ownerId], references: [id])
    subscriptions   Subscription[]
    locations       BusinessLocation[]
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subscription {
    id				    String @id @default(auto()) @map("_id") @db.ObjectId
    amount              Float
    mobile              String
    type                String
    month               String
    year                String
    MerchantRequestID   String?
    CheckoutRequestID   String?
    MpesaReceiptNumber  String?
    status              String
	businessId          String @db.ObjectId
    business            Business @relation(fields: [businessId], references: [id])
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BusinessLocation {
	id				String @id @default(auto()) @map("_id") @db.ObjectId
    name            String
	country			String
	city			String
	address			String
    businessId      String @db.ObjectId
    business        Business @relation(fields: [businessId], references: [id])
    ctegories       Category[]
    products        Product[]
    supplies        Supply[]
    sales           Sale[]
    pettyCash       PettyCash[]
    orderLine       OrderLine[]
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    name                String  
    businessLocationId  String @db.ObjectId
    businessLocation    BusinessLocation @relation(fields: [businessLocationId], references: [id]) 
    products            Product[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    businessLocationId  String @db.ObjectId
    name                String
    description         String
    status              String
    categoryId          String @db.ObjectId
    businessLocation    BusinessLocation @relation(fields: [businessLocationId], references: [id] )
    category            Category @relation(fields: [categoryId], references: [id])
    supplies            Supply[]
    sales               Sale[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Supply {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    productId           String @db.ObjectId
    orderLineId         String @db.ObjectId
    businessLocationId  String @db.ObjectId
    buyingPrice         Float
    itemsCount          Float
    product             Product @relation(fields: [productId], references: [id])
    orderLine           OrderLine @relation(fields: [orderLineId], references: [id])
    businessLocation    BusinessLocation @relation(fields: [businessLocationId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Sale {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    productId           String @db.ObjectId
    orderLineId         String @db.ObjectId
    businessLocationId  String @db.ObjectId
    sellingPrice        Float
    itemsCount          Float
    product             Product @relation(fields: [productId], references: [id])
    orderLine           OrderLine @relation(fields: [orderLineId], references: [id])
    businessLocation    BusinessLocation @relation(fields: [businessLocationId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PettyCash {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    businessLocationId  String @db.ObjectId
    orderLineId         String @db.ObjectId
    pettyCash           Float
    losses              Float
    miscellaneous       Float
    businessLocation    BusinessLocation @relation(fields: [businessLocationId], references: [id])
    orderLine           OrderLine @relation(fields: [orderLineId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrderLine {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    businessLocationId  String @db.ObjectId
    date                String 
    businessLocation    BusinessLocation @relation(fields: [businessLocationId], references: [id])
    sales               Sale[]
    supplies            Supply[]
    pettyCash           PettyCash[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Payment {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    mobile              String
    amount              Float
    MerchantRequestID   String
    CheckoutRequestID   String?
    status              String
    userId              String @db.ObjectId
    user                User @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}