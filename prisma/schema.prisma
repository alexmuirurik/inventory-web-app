datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            			String          @id @default(auto()) @map("_id") @db.ObjectId
    name          			String?
    email         			String?         @unique
    emailVerified 			DateTime?
    image         			String?
    activeLocation          String? @db.ObjectId
    accounts      			Account[]
    sessions      			Session[]  
    businesses              Business[]
    Authenticator 			Authenticator[]
    cashiers                Cashier[]
    createdAt 				DateTime @default(now())
    updatedAt 				DateTime @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @id @map("_id")
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user 				User @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([userId, credentialID])
}

model Business {
	id				String @id @default(auto()) @map("_id") @db.ObjectId
	name			String 
	ownerId			String @db.ObjectId
    owner           User @relation(fields: [ownerId], references: [id])
    categories      Category[]
    locations       BusinessLocation[]
    cashiers        Cashier[]
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BusinessLocation {
	id				String @id @default(auto()) @map("_id") @db.ObjectId
    name            String
	country			String
	city			String
	address			String
    businessId      String @db.ObjectId
    business        Business @relation(fields: [businessId], references: [id])
    cashiers        Cashier[]
	createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cashier {
    id				    String @id @default(auto()) @map("_id") @db.ObjectId
    email               String @unique
    userid              String? @db.ObjectId
    businessId          String @db.ObjectId
    status              String
    businesslocationId  String? @db.ObjectId
    business            Business @relation(fields: [businessId], references: [id])
    businesslocation    BusinessLocation? @relation(fields: [businesslocationId], references: [id])
    user                User? @relation(fields: [userid], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Supplier {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    name                String
    company             String
    amount              Float
    paid                Float
    arrears             Float
    purchases           Purchase[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Customer {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    name                String
    company             String
    amount              Float
    paid                Float
    arrears             Float
    sales               Sale[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    name                String
    description         String 
    sku                 String
    image               String
    colors              Json 
    buyingPrice         Float
    sellingPrice        Float
    Discount            Float
    stock               Float
    status              String
    purchaseId          String @db.ObjectId
    categoryId          String @db.ObjectId
    brandId             String @db.ObjectId
    purchase            Purchase @relation(fields: [purchaseId], references: [id])
    category            Category @relation(fields: [categoryId], references: [id])
    brand               Brand @relation(fields: [brandId], references: [id])
    tags                ProductinTag[]
    checkoutitems       CheckoutItem[]
    purchaseItems       PurchaseItem[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Brand {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    name                String    
    products            Product[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    name                String   
    businessId          String @db.ObjectId
    business            Business @relation(fields: [businessId], references: [id]) 
    tags                Tag[]
    products            Product[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag { 
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    name                String
    categoryId          String @db.ObjectId
    category            Category @relation(fields: [categoryId], references: [id])
    products            ProductinTag[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductinTag {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    productId           String @db.ObjectId
    tagId               String @db.ObjectId
    product             Product @relation(fields: [productId], references: [id])
    tag                 Tag @relation(fields: [tagId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Sale {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    customerId          String @db.ObjectId
    amount              Float
    paid                Float
    arrears             Float
    paymentmethod       String
    status              String
    customer            Customer @relation(fields: [customerId], references: [id])
    checkoutitems       CheckoutItem[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CheckoutItem {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    productId           String @db.ObjectId
    saleId              String @db.ObjectId
    status              String
    product             Product @relation(fields: [productId], references: [id])
    sale                Sale @relation(fields: [saleId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Purchase {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    amount              Float
    paid                Float
    arrears             Float
    paymentmethod       String
    status              String
    supplierId          String @db.ObjectId
    supplier            Supplier @relation(fields: [supplierId], references: [id])
    purchaseitems       PurchaseItem[]
    products            Product[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PurchaseItem {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    productId           String @db.ObjectId
    purchaseId          String @db.ObjectId
    status              String
    product             Product @relation(fields: [productId], references: [id])
    purchase            Purchase @relation(fields: [purchaseId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Mpesa {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}